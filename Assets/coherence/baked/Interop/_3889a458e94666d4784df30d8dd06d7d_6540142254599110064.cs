// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;

    public struct _3889a458e94666d4784df30d8dd06d7d_6540142254599110064 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 activeFireEffect;
            [FieldOffset(4)]
            public System.Single fireTimer;
            [FieldOffset(8)]
            public System.Single bigFireTimer;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _3889a458e94666d4784df30d8dd06d7d_6540142254599110064.activeFireEffectMask;
            activeFireEffectSimulationFrame = frame;
            FieldsMask |= _3889a458e94666d4784df30d8dd06d7d_6540142254599110064.fireTimerMask;
            fireTimerSimulationFrame = frame;
            FieldsMask |= _3889a458e94666d4784df30d8dd06d7d_6540142254599110064.bigFireTimerMask;
            bigFireTimerSimulationFrame = frame;
        }

        public static unsafe _3889a458e94666d4784df30d8dd06d7d_6540142254599110064 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 12) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 12) " +
                    "for component with ID 159");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 159");
            }

            var orig = new _3889a458e94666d4784df30d8dd06d7d_6540142254599110064();

            var comp = (Interop*)data;

            orig.activeFireEffect = comp->activeFireEffect;
            orig.fireTimer = comp->fireTimer;
            orig.bigFireTimer = comp->bigFireTimer;

            return orig;
        }

        public static unsafe _3889a458e94666d4784df30d8dd06d7d_6540142254599110064 FromInteropArchetype_3889a458e94666d4784df30d8dd06d7d__3889a458e94666d4784df30d8dd06d7d_6540142254599110064_LOD0(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 12) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 12) " +
                    "for component with ID 196");
            }

                
            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 196");
            }

            var orig = new _3889a458e94666d4784df30d8dd06d7d_6540142254599110064();

            var comp = (Interop*)data;

            orig.activeFireEffect = comp->activeFireEffect;
            orig.fireTimer = comp->fireTimer;
            orig.bigFireTimer = comp->bigFireTimer;

            return orig;
        }

        public static uint activeFireEffectMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame activeFireEffectSimulationFrame;
        public System.Int32 activeFireEffect;
        public static uint fireTimerMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame fireTimerSimulationFrame;
        public System.Single fireTimer;
        public static uint bigFireTimerMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame bigFireTimerSimulationFrame;
        public System.Single bigFireTimer;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 159;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000000111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 3;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _activeFireEffect_Min = -1;
        private static readonly System.Int32 _activeFireEffect_Max = 10;
        private static readonly float _fireTimer_Min = -5f;
        private static readonly float _fireTimer_Max = 100f;
        private static readonly float _bigFireTimer_Min = -5f;
        private static readonly float _bigFireTimer_Max = 100f;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_3889a458e94666d4784df30d8dd06d7d_6540142254599110064)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.activeFireEffectSimulationFrame = other.activeFireEffectSimulationFrame;
                this.activeFireEffect = other.activeFireEffect;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.fireTimerSimulationFrame = other.fireTimerSimulationFrame;
                this.fireTimer = other.fireTimer;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.bigFireTimerSimulationFrame = other.bigFireTimerSimulationFrame;
                this.bigFireTimer = other.bigFireTimer;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_3889a458e94666d4784df30d8dd06d7d_6540142254599110064 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 3);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.activeFireEffect, _activeFireEffect_Min, _activeFireEffect_Max, "_3889a458e94666d4784df30d8dd06d7d_6540142254599110064.activeFireEffect", logger);

                data.activeFireEffect = Coherence.Utils.Bounds.Clamp(data.activeFireEffect, _activeFireEffect_Min, _activeFireEffect_Max);

                var fieldValue = data.activeFireEffect;



                bitStream.WriteIntegerRange(fieldValue, 4, -1);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.fireTimer, _fireTimer_Min, _fireTimer_Max, "_3889a458e94666d4784df30d8dd06d7d_6540142254599110064.fireTimer", logger);


                var fieldValue = data.fireTimer;



                bitStream.WriteFloat(fieldValue, FloatMeta.ForFixedPoint(-5, 100, 0.001d));
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {

                Coherence.Utils.Bounds.Check(data.bigFireTimer, _bigFireTimer_Min, _bigFireTimer_Max, "_3889a458e94666d4784df30d8dd06d7d_6540142254599110064.bigFireTimer", logger);


                var fieldValue = data.bigFireTimer;



                bitStream.WriteFloat(fieldValue, FloatMeta.ForFixedPoint(-5, 100, 0.001d));
            }

            mask >>= 1;

            return mask;
        }

        public static _3889a458e94666d4784df30d8dd06d7d_6540142254599110064 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(3);
            }

            var val = new _3889a458e94666d4784df30d8dd06d7d_6540142254599110064();
            if (bitStream.ReadMask())
            {

                val.activeFireEffect = bitStream.ReadIntegerRange(4, -1);
                val.FieldsMask |= _3889a458e94666d4784df30d8dd06d7d_6540142254599110064.activeFireEffectMask;
            }
            if (bitStream.ReadMask())
            {

                val.fireTimer = bitStream.ReadFloat(FloatMeta.ForFixedPoint(-5, 100, 0.001d));
                val.FieldsMask |= _3889a458e94666d4784df30d8dd06d7d_6540142254599110064.fireTimerMask;
            }
            if (bitStream.ReadMask())
            {

                val.bigFireTimer = bitStream.ReadFloat(FloatMeta.ForFixedPoint(-5, 100, 0.001d));
                val.FieldsMask |= _3889a458e94666d4784df30d8dd06d7d_6540142254599110064.bigFireTimerMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }

        public static _3889a458e94666d4784df30d8dd06d7d_6540142254599110064 DeserializeArchetype_3889a458e94666d4784df30d8dd06d7d__3889a458e94666d4784df30d8dd06d7d_6540142254599110064_LOD0(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(3);
            }

            var val = new _3889a458e94666d4784df30d8dd06d7d_6540142254599110064();
            if (bitStream.ReadMask())
            {

                val.activeFireEffect = bitStream.ReadIntegerRange(4, -1);
                val.FieldsMask |= activeFireEffectMask;
            }
            if (bitStream.ReadMask())
            {

                val.fireTimer = bitStream.ReadFloat(FloatMeta.ForFixedPoint(-5, 100, 0.001d));
                val.FieldsMask |= fireTimerMask;
            }
            if (bitStream.ReadMask())
            {

                val.bigFireTimer = bitStream.ReadFloat(FloatMeta.ForFixedPoint(-5, 100, 0.001d));
                val.FieldsMask |= bigFireTimerMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }

        public override string ToString()
        {
            return $"_3889a458e94666d4784df30d8dd06d7d_6540142254599110064(" +
                $" activeFireEffect: { this.activeFireEffect }" +
                $" fireTimer: { this.fireTimer }" +
                $" bigFireTimer: { this.bigFireTimer }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(3, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(3, '0') })";
        }
    }

}
