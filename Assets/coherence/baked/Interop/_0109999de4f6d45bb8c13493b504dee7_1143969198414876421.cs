// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;

    public struct _0109999de4f6d45bb8c13493b504dee7_1143969198414876421 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public ByteArray path;
            [FieldOffset(16)]
            public System.Int32 pathDirtyCounter;
        }

        public static unsafe _0109999de4f6d45bb8c13493b504dee7_1143969198414876421 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 20) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 20) " +
                    "for component with ID 153");
            }

            if (simFramesCount != 2) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 2) " +
                    "for component with ID 153");
            }

            var orig = new _0109999de4f6d45bb8c13493b504dee7_1143969198414876421();

            var comp = (Interop*)data;

            orig.path = comp->path.Data != null ? System.Text.Encoding.UTF8.GetString((byte*)comp->path.Data, comp->path.Length) : null;
            orig.pathSimulationFrame = simFrames[0].Into();
            orig.pathDirtyCounter = comp->pathDirtyCounter;
            orig.pathDirtyCounterSimulationFrame = simFrames[1].Into();

            return orig;
        }


        public static uint pathMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame pathSimulationFrame;
        public System.String path;
        public static uint pathDirtyCounterMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame pathDirtyCounterSimulationFrame;
        public System.Int32 pathDirtyCounter;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 153;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000000011;
        public bool HasFields() => true;
        public bool HasRefFields() => false;

        private long[] simulationFrames;

        public long[] GetSimulationFrames() {
            if (simulationFrames == null)
            {
                simulationFrames = new long[2];
            }

            simulationFrames[0] = pathSimulationFrame;
            simulationFrames[1] = pathDirtyCounterSimulationFrame;

            return simulationFrames;
        }

        public int GetFieldCount() => 2;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _pathDirtyCounter_Min = -2147483648;
        private static readonly System.Int32 _pathDirtyCounter_Max = 2147483647;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;

            if ((FieldsMask & pathMask) != 0 && (min == null || pathSimulationFrame < min))
            {
                min = pathSimulationFrame;
            }
            if ((FieldsMask & pathDirtyCounterMask) != 0 && (min == null || pathDirtyCounterSimulationFrame < min))
            {
                min = pathDirtyCounterSimulationFrame;
            }

            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_0109999de4f6d45bb8c13493b504dee7_1143969198414876421)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                pathSimulationFrame = other.pathSimulationFrame;
                path = other.path;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                pathDirtyCounterSimulationFrame = other.pathDirtyCounterSimulationFrame;
                pathDirtyCounter = other.pathDirtyCounter;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_0109999de4f6d45bb8c13493b504dee7_1143969198414876421 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 2);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                if (isRefSimFrameValid) {
                    var simFrameDelta = data.pathSimulationFrame - referenceSimulationFrame;
                    if (simFrameDelta > byte.MaxValue) {
                        simFrameDelta = byte.MaxValue;
                    }

                    SerializeTools.WriteFieldSimFrameDelta(bitStream, (byte)simFrameDelta);
                } else {
                    SerializeTools.WriteFieldSimFrameDelta(bitStream, 0);
                }


                var fieldValue = data.path;



                bitStream.WriteShortString(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                if (isRefSimFrameValid) {
                    var simFrameDelta = data.pathDirtyCounterSimulationFrame - referenceSimulationFrame;
                    if (simFrameDelta > byte.MaxValue) {
                        simFrameDelta = byte.MaxValue;
                    }

                    SerializeTools.WriteFieldSimFrameDelta(bitStream, (byte)simFrameDelta);
                } else {
                    SerializeTools.WriteFieldSimFrameDelta(bitStream, 0);
                }

                Coherence.Utils.Bounds.Check(data.pathDirtyCounter, _pathDirtyCounter_Min, _pathDirtyCounter_Max, "_0109999de4f6d45bb8c13493b504dee7_1143969198414876421.pathDirtyCounter", logger);

                data.pathDirtyCounter = Coherence.Utils.Bounds.Clamp(data.pathDirtyCounter, _pathDirtyCounter_Min, _pathDirtyCounter_Max);

                var fieldValue = data.pathDirtyCounter;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;

            return mask;
        }

        public static _0109999de4f6d45bb8c13493b504dee7_1143969198414876421 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(2);
            }

            var val = new _0109999de4f6d45bb8c13493b504dee7_1143969198414876421();
            if (bitStream.ReadMask())
            {
                val.pathSimulationFrame = referenceSimulationFrame + DeserializerTools.ReadFieldSimFrameDelta(bitStream);

                val.path = bitStream.ReadShortString();
                val.FieldsMask |= pathMask;
            }
            if (bitStream.ReadMask())
            {
                val.pathDirtyCounterSimulationFrame = referenceSimulationFrame + DeserializerTools.ReadFieldSimFrameDelta(bitStream);

                val.pathDirtyCounter = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= pathDirtyCounterMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_0109999de4f6d45bb8c13493b504dee7_1143969198414876421(" +
                $" path: { path }" +
                $", pathSimFrame: { pathSimulationFrame }" +
                $" pathDirtyCounter: { pathDirtyCounter }" +
                $", pathDirtyCounterSimFrame: { pathDirtyCounterSimulationFrame }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(2, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(2, '0') })";
        }
    }


}