// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;

    public struct _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Single MoveSpeed;
            [FieldOffset(4)]
            public System.Byte Grounded;
            [FieldOffset(5)]
            public System.Byte CarryingBig;
            [FieldOffset(6)]
            public System.Byte IsChopping;
            [FieldOffset(7)]
            public System.Byte IsSitting;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.MoveSpeedMask;
            MoveSpeedSimulationFrame = frame;
            FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.GroundedMask;
            GroundedSimulationFrame = frame;
            FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.CarryingBigMask;
            CarryingBigSimulationFrame = frame;
            FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.IsChoppingMask;
            IsChoppingSimulationFrame = frame;
            FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.IsSittingMask;
            IsSittingSimulationFrame = frame;
        }

        public static unsafe _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 8) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 8) " +
                    "for component with ID 183");
            }

            if (simFramesCount != 1) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 1) " +
                    "for component with ID 183");
            }

            var orig = new _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322();

            var comp = (Interop*)data;

            orig.MoveSpeed = comp->MoveSpeed;
            orig.MoveSpeedSimulationFrame = simFrames[0].Into();
            orig.Grounded = comp->Grounded != 0;
            orig.CarryingBig = comp->CarryingBig != 0;
            orig.IsChopping = comp->IsChopping != 0;
            orig.IsSitting = comp->IsSitting != 0;

            return orig;
        }

        public static unsafe _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322 FromInteropArchetype_cd9bcc1feead9419fac0c5981ce85c23__cd9bcc1feead9419fac0c5981ce85c23_176131441763086322_LOD0(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 8) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 8) " +
                    "for component with ID 203");
            }

                
            if (simFramesCount != 1) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 1) " +
                    "for component with ID 203");
            }

            var orig = new _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322();

            var comp = (Interop*)data;

            orig.MoveSpeed = comp->MoveSpeed;
            orig.MoveSpeedSimulationFrame = simFrames[0].Into();
            orig.Grounded = comp->Grounded != 0;
            orig.CarryingBig = comp->CarryingBig != 0;
            orig.IsChopping = comp->IsChopping != 0;
            orig.IsSitting = comp->IsSitting != 0;

            return orig;
        }

        public static uint MoveSpeedMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame MoveSpeedSimulationFrame;
        public System.Single MoveSpeed;
        public static uint GroundedMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame GroundedSimulationFrame;
        public System.Boolean Grounded;
        public static uint CarryingBigMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame CarryingBigSimulationFrame;
        public System.Boolean CarryingBig;
        public static uint IsChoppingMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame IsChoppingSimulationFrame;
        public System.Boolean IsChopping;
        public static uint IsSittingMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame IsSittingSimulationFrame;
        public System.Boolean IsSitting;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 183;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000011111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;

        private long[] simulationFrames;

        public long[] GetSimulationFrames() {
            if (simulationFrames == null)
            {
                simulationFrames = new long[1];
            }

            simulationFrames[0] = MoveSpeedSimulationFrame;

            return simulationFrames;
        }

        public int GetFieldCount() => 5;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;


        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;

            if ((FieldsMask & _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.MoveSpeedMask) != 0 && (min == null || this.MoveSpeedSimulationFrame < min))
            {
                min = this.MoveSpeedSimulationFrame;
            }

            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_cd9bcc1feead9419fac0c5981ce85c23_176131441763086322)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.MoveSpeedSimulationFrame = other.MoveSpeedSimulationFrame;
                this.MoveSpeed = other.MoveSpeed;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.GroundedSimulationFrame = other.GroundedSimulationFrame;
                this.Grounded = other.Grounded;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.CarryingBigSimulationFrame = other.CarryingBigSimulationFrame;
                this.CarryingBig = other.CarryingBig;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.IsChoppingSimulationFrame = other.IsChoppingSimulationFrame;
                this.IsChopping = other.IsChopping;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.IsSittingSimulationFrame = other.IsSittingSimulationFrame;
                this.IsSitting = other.IsSitting;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_cd9bcc1feead9419fac0c5981ce85c23_176131441763086322 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 5);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                if (isRefSimFrameValid) {
                    var simFrameDelta = data.MoveSpeedSimulationFrame - referenceSimulationFrame;
                    if (simFrameDelta > byte.MaxValue) {
                        simFrameDelta = byte.MaxValue;
                    }

                    SerializeTools.WriteFieldSimFrameDelta(bitStream, (byte)simFrameDelta);
                } else {
                    SerializeTools.WriteFieldSimFrameDelta(bitStream, 0);
                }


                var fieldValue = data.MoveSpeed;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Grounded;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.CarryingBig;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.IsChopping;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.IsSitting;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;

            return mask;
        }

        public static _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(5);
            }

            var val = new _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322();
            if (bitStream.ReadMask())
            {
                val.MoveSpeedSimulationFrame = referenceSimulationFrame + DeserializerTools.ReadFieldSimFrameDelta(bitStream);

                val.MoveSpeed = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.MoveSpeedMask;
            }
            if (bitStream.ReadMask())
            {

                val.Grounded = bitStream.ReadBool();
                val.FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.GroundedMask;
            }
            if (bitStream.ReadMask())
            {

                val.CarryingBig = bitStream.ReadBool();
                val.FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.CarryingBigMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsChopping = bitStream.ReadBool();
                val.FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.IsChoppingMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsSitting = bitStream.ReadBool();
                val.FieldsMask |= _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322.IsSittingMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }

        public static _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322 DeserializeArchetype_cd9bcc1feead9419fac0c5981ce85c23__cd9bcc1feead9419fac0c5981ce85c23_176131441763086322_LOD0(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(5);
            }

            var val = new _cd9bcc1feead9419fac0c5981ce85c23_176131441763086322();
            if (bitStream.ReadMask())
            {
                val.MoveSpeedSimulationFrame = referenceSimulationFrame + DeserializerTools.ReadFieldSimFrameDelta(bitStream);

                val.MoveSpeed = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= MoveSpeedMask;
            }
            if (bitStream.ReadMask())
            {

                val.Grounded = bitStream.ReadBool();
                val.FieldsMask |= GroundedMask;
            }
            if (bitStream.ReadMask())
            {

                val.CarryingBig = bitStream.ReadBool();
                val.FieldsMask |= CarryingBigMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsChopping = bitStream.ReadBool();
                val.FieldsMask |= IsChoppingMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsSitting = bitStream.ReadBool();
                val.FieldsMask |= IsSittingMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }

        public override string ToString()
        {
            return $"_cd9bcc1feead9419fac0c5981ce85c23_176131441763086322(" +
                $" MoveSpeed: { this.MoveSpeed }" +
                $", MoveSpeedSimFrame: { this.MoveSpeedSimulationFrame }" +
                $" Grounded: { this.Grounded }" +
                $" CarryingBig: { this.CarryingBig }" +
                $" IsChopping: { this.IsChopping }" +
                $" IsSitting: { this.IsSitting }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(5, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(5, '0') })";
        }
    }

}
