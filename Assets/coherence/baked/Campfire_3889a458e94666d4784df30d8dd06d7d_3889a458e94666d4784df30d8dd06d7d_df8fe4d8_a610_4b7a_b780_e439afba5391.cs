// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using System.Collections.Generic;
    using UnityEngine;

    public struct Campfire_3889a458e94666d4784df30d8dd06d7d_3889a458e94666d4784df30d8dd06d7d_df8fe4d8_a610_4b7a_b780_e439afba5391 : IEntityCommand
    {
        public System.Int32 oldEffectID;
        public System.Int32 newEffectID;
        public System.String syncConfigID;
        
        public Entity Entity { get; set; }
        public MessageTarget Routing { get; set; }
        public uint Sender { get; set; }
        public uint GetComponentType() => 14;
        
        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            return IEntityMapper.Error.None;
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() {
            return default;
        }

        public void NullEntityRefs(Entity entity) {
        }
        
        public Campfire_3889a458e94666d4784df30d8dd06d7d_3889a458e94666d4784df30d8dd06d7d_df8fe4d8_a610_4b7a_b780_e439afba5391(
        Entity entity,
        System.Int32 oldEffectID,
        System.Int32 newEffectID,
        System.String syncConfigID
)
        {
            Entity = entity;
            Routing = MessageTarget.All;
            Sender = 0;
            
            this.oldEffectID = oldEffectID; 
            this.newEffectID = newEffectID; 
            this.syncConfigID = syncConfigID; 
        }
        
        public static void Serialize(Campfire_3889a458e94666d4784df30d8dd06d7d_3889a458e94666d4784df30d8dd06d7d_df8fe4d8_a610_4b7a_b780_e439afba5391 commandData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteIntegerRange(commandData.oldEffectID, 32, -2147483648);
            bitStream.WriteIntegerRange(commandData.newEffectID, 32, -2147483648);
            bitStream.WriteShortString(commandData.syncConfigID);
        }
        
        public static Campfire_3889a458e94666d4784df30d8dd06d7d_3889a458e94666d4784df30d8dd06d7d_df8fe4d8_a610_4b7a_b780_e439afba5391 Deserialize(IInProtocolBitStream bitStream, Entity entity, MessageTarget target)
        {
            var dataoldEffectID = bitStream.ReadIntegerRange(32, -2147483648);
            var datanewEffectID = bitStream.ReadIntegerRange(32, -2147483648);
            var datasyncConfigID = bitStream.ReadShortString();
    
            return new Campfire_3889a458e94666d4784df30d8dd06d7d_3889a458e94666d4784df30d8dd06d7d_df8fe4d8_a610_4b7a_b780_e439afba5391()
            {
                Entity = entity,
                Routing = target,
                oldEffectID = dataoldEffectID,
                newEffectID = datanewEffectID,
                syncConfigID = datasyncConfigID
            };   
        }
    }

}