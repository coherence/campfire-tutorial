// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    
    public struct Banjo_e74854605b68b435280bc0ac73fef6c1_PositionedObject_6806255523165594879 : ICoherenceComponentData
    {
        public static uint objectAnchorSyncMask => 0b00000000000000000000000000000001;
        public Entity objectAnchorSync;
        
        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 158;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000000001;
        public bool HasFields() => true;
        public bool HasRefFields() => true;
        
        public HashSet<Entity> GetEntityRefs()
        {
            return new HashSet<Entity>()
            {
                objectAnchorSync,
            };
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            Entity absoluteEntity;
            IEntityMapper.Error err;
            err = mapper.MapToAbsoluteEntity(objectAnchorSync, false, out absoluteEntity);
            
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            
            objectAnchorSync = absoluteEntity;
            return IEntityMapper.Error.None;  
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            Entity relativeEntity;
            IEntityMapper.Error err;
            // We assume that the inConnection held changes with unresolved references, so the 'createMapping=true' is
            // there only because there's a chance that the parent creation change will be processed after this one
            // meaning there's no mapping for the parent yet. This wouldn't be necessary if mapping creation would happen
            // in the clientWorld via create/destroy requests while here we would only check whether mapping exists or not.		
            var createParentMapping_objectAnchorSync = true;
            err = mapper.MapToRelativeEntity(objectAnchorSync, createParentMapping_objectAnchorSync,
             out relativeEntity);
            
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
          
            objectAnchorSync = relativeEntity;
            return IEntityMapper.Error.None;   
        }
        
        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;
        public AbsoluteSimulationFrame Frame;
        
    
        public void SetSimulationFrame(AbsoluteSimulationFrame frame)
        {
            Frame = frame;
        }
        
        public AbsoluteSimulationFrame GetSimulationFrame() => Frame;
        
        public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
        {
            var other = (Banjo_e74854605b68b435280bc0ac73fef6c1_PositionedObject_6806255523165594879)data;

            FieldsMask |= mask;
            StoppedMask &= ~(mask);

            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                objectAnchorSync = other.objectAnchorSync;
            }
            
            mask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }
        
        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }
        
        public static uint Serialize(Banjo_e74854605b68b435280bc0ac73fef6c1_PositionedObject_6806255523165594879 data, uint mask, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 1);
            }

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.objectAnchorSync;
            

            
                bitStream.WriteEntity(fieldValue);
            }
            
            mask >>= 1;
          
            return mask;
        }
        
        public static (Banjo_e74854605b68b435280bc0ac73fef6c1_PositionedObject_6806255523165594879, uint) Deserialize(InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(1);
            }

            var mask = (uint)0;
            var val = new Banjo_e74854605b68b435280bc0ac73fef6c1_PositionedObject_6806255523165594879();
            if (bitStream.ReadMask())
            {
                val.objectAnchorSync = bitStream.ReadEntity();
                mask |= objectAnchorSyncMask;
            }
                    
            val.FieldsMask = mask;
            val.StoppedMask = stoppedMask;

            return (val, mask);
        }
        
        
        public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
        {
            var last = lastSent as Banjo_e74854605b68b435280bc0ac73fef6c1_PositionedObject_6806255523165594879?;
            
        }

        public override string ToString()
        {
            return $"Banjo_e74854605b68b435280bc0ac73fef6c1_PositionedObject_6806255523165594879(objectAnchorSync: { objectAnchorSync }, Mask: {System.Convert.ToString(FieldsMask, 2).PadLeft(1, '0')}), Stopped: {System.Convert.ToString(StoppedMask, 2).PadLeft(1, '0')})";
        }
    }
    

}