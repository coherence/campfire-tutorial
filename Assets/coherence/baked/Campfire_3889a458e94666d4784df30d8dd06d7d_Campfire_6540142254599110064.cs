// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    
    public struct Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064 : ICoherenceComponentData
    {
        public static uint activeFireEffectMask => 0b00000000000000000000000000000001;
        public System.Int32 activeFireEffect;
        public static uint fireTimerMask => 0b00000000000000000000000000000010;
        public System.Single fireTimer;
        public static uint bigFireTimerMask => 0b00000000000000000000000000000100;
        public System.Single bigFireTimer;
        
        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 169;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000000111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;
        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;  
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;   
        }
        
        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;
        public AbsoluteSimulationFrame Frame;
        
        private static readonly System.Int32 _activeFireEffect_Min = -1;
        private static readonly System.Int32 _activeFireEffect_Max = 10;
        private static readonly float _fireTimer_Min = -5f;
        private static readonly float _fireTimer_Max = 100f;
        private static readonly float _bigFireTimer_Min = -5f;
        private static readonly float _bigFireTimer_Max = 100f;
    
        public void SetSimulationFrame(AbsoluteSimulationFrame frame)
        {
            Frame = frame;
        }
        
        public AbsoluteSimulationFrame GetSimulationFrame() => Frame;
        
        public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
        {
            var other = (Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064)data;

            FieldsMask |= mask;
            StoppedMask &= ~(mask);

            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                activeFireEffect = other.activeFireEffect;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                fireTimer = other.fireTimer;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                bigFireTimer = other.bigFireTimer;
            }
            
            mask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }
        
        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }
        
        public static uint Serialize(Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064 data, uint mask, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 3);
            }

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.activeFireEffect, _activeFireEffect_Min, _activeFireEffect_Max, "Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064.activeFireEffect", logger);
                
                data.activeFireEffect = Coherence.Utils.Bounds.Clamp(data.activeFireEffect, _activeFireEffect_Min, _activeFireEffect_Max);
            
                var fieldValue = data.activeFireEffect;
            

            
                bitStream.WriteIntegerRange(fieldValue, 4, -1);
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.fireTimer, _fireTimer_Min, _fireTimer_Max, "Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064.fireTimer", logger);
                
            
                var fieldValue = data.fireTimer;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.ForFixedPoint(-5, 100, 0.001d));
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.bigFireTimer, _bigFireTimer_Min, _bigFireTimer_Max, "Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064.bigFireTimer", logger);
                
            
                var fieldValue = data.bigFireTimer;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.ForFixedPoint(-5, 100, 0.001d));
            }
            
            mask >>= 1;
          
            return mask;
        }
        
        public static (Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064, uint) Deserialize(InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(3);
            }

            var mask = (uint)0;
            var val = new Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064();
            if (bitStream.ReadMask())
            {
                val.activeFireEffect = bitStream.ReadIntegerRange(4, -1);
                mask |= activeFireEffectMask;
            }
            if (bitStream.ReadMask())
            {
                val.fireTimer = bitStream.ReadFloat(FloatMeta.ForFixedPoint(-5, 100, 0.001d));
                mask |= fireTimerMask;
            }
            if (bitStream.ReadMask())
            {
                val.bigFireTimer = bitStream.ReadFloat(FloatMeta.ForFixedPoint(-5, 100, 0.001d));
                mask |= bigFireTimerMask;
            }
                    
            val.FieldsMask = mask;
            val.StoppedMask = stoppedMask;

            return (val, mask);
        }
        
        public static (Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064, uint) DeserializeArchetypeCampfire_3889a458e94666d4784df30d8dd06d7d_Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064_LOD0(InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(3);
            }

            var mask = (uint)0;
            var val = new Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064();
            if (bitStream.ReadMask())
            {
                val.activeFireEffect = bitStream.ReadIntegerRange(4, -1);
                mask |= activeFireEffectMask;
            }
            if (bitStream.ReadMask())
            {
                val.fireTimer = bitStream.ReadFloat(FloatMeta.ForFixedPoint(-5, 100, 0.001d));
                mask |= fireTimerMask;
            }
            if (bitStream.ReadMask())
            {
                val.bigFireTimer = bitStream.ReadFloat(FloatMeta.ForFixedPoint(-5, 100, 0.001d));
                mask |= bigFireTimerMask;
            }
                        
            val.FieldsMask = mask;
            val.StoppedMask = mask;
            
            return (val, mask);
        }
        
        public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
        {
            var last = lastSent as Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064?;
            
        }

        public override string ToString()
        {
            return $"Campfire_3889a458e94666d4784df30d8dd06d7d_Campfire_6540142254599110064(activeFireEffect: { activeFireEffect }, fireTimer: { fireTimer }, bigFireTimer: { bigFireTimer }, Mask: {System.Convert.ToString(FieldsMask, 2).PadLeft(3, '0')}), Stopped: {System.Convert.ToString(StoppedMask, 2).PadLeft(3, '0')})";
        }
    }
    

}